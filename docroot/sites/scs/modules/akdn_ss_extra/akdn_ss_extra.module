<?php


/**
 * Implementation of hook_menu().
 */
function akdn_ss_extra_menu() {

  $items['admin/config/syndication-server/akdn/workflow'] = array(
    'title' => 'Workflow Settings',
    'description' => 'Taxonomy based workflow settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('akdn_ss_extra_workflow'),
    'access arguments' => array('configure client api keys'),
  );
  return $items;
}

/**
 * Workflow settings form.
 */
function akdn_ss_extra_workflow($form, &$form_state){
  // Get all available vocabularies
  $vocabulary = taxonomy_get_vocabularies();
  foreach ($vocabulary as $item) {
    $key = $item->vid;
    $value = $item->name;
    $vocab_array[$key] = $value;
  }

  $vocab_selected = isset($form_state['values']['akdn_ss_extra_workflow_vocab']) ? $form_state['values']['akdn_ss_extra_workflow_vocab'] : variable_get('akdn_ss_extra_workflow_vocab', key($vocabulary));

  $form['akdn_ss_extra_workflow'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable taxonomy based workflow.'),
    '#default_value' => variable_get('akdn_ss_extra_workflow', 0),
  );

  $form['akdn_ss_extra_workflow_vocab'] = array(
    '#type' => 'select',
    '#title' => t('Vocabulary'),
    '#options' => $vocab_array,
    '#default_value' => variable_get('akdn_ss_extra_workflow_vocab', 0),
    '#description' => t('Select the vocabulary that should be used for for the workflow.'),
    '#ajax' => array(
      'event' => 'change',
      'callback' => '_akdn_ss_extra_workflow_helper',
      'wrapper' => 'dropdown_second_replace',
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="akdn_ss_extra_workflow"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['asse_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Workflow Options'),
    '#collapsible' => FALSE,
    '#prefix' => '<div id="dropdown_second_replace">',
    '#suffix' => '</div>',
    '#states' => array(
      'visible' => array(
        ':input[name="akdn_ss_extra_workflow"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['asse_options']['akdn_ss_extra_syndicate'] = array(
    '#type' => 'select',
    '#title' => t('Syndicate'),
    '#description' => t('Select the terms that indicate that a node should be syndicated.'),
    '#options' => _akdn_ss_extra_terms($vocab_selected),
    '#default_value' => variable_get('akdn_ss_extra_syndicate', array()),
  );
  $form['asse_options']['akdn_ss_extra_delete'] = array(
    '#type' => 'select',
    '#title' => t('Delete'),
    '#description' => t('Select the terms that indicate that a node should be marked as deleted.'),
    '#options' => _akdn_ss_extra_terms($vocab_selected),
    '#default_value' => variable_get('akdn_ss_extra_delete', array()),
  );
  return system_settings_form($form);
}

/**
 * Ajax callback for workflow settings form.
 */
function _akdn_ss_extra_workflow_helper($form, $form_state){
  return $form['asse_options'];
}

/**
 * Helper function for workflow settings form.
 */
function _akdn_ss_extra_terms($vid = 0){
  if (!$vid) {
    return array();
  }
  $terms = taxonomy_get_tree($vid);
  foreach ($terms as  $term) {
    $term_array[$term->tid] = $term->name;
  }
  return $term_array;
}

/**
 * Implements sss_query_alter from the syndication server
 *
 * @param $op
 *    The service action or operation being performed
 * @param $query
 *    The Database query object
 * @param $args
 *    Addional Arguments
 *
 * If workflow is enabled only ddeliver nodes that are tagged accordingly.
 */
function akdn_ss_extra_sss_query_alter($op, $query, $args = array()) {
  // Firts check if access control is enabled.
  if (variable_get('akdn_ss_extra_workflow', 0)){
    switch($op){
      case 'syndication_node_retrieve':
        $query->join('taxonomy_index', 'w', 'n.nid = w.nid');
        $tid = variable_get('akdn_ss_extra_syndicate', 0);
        if ($tid) {
          $query->condition('w.tid', $tid);
        }
      break;
    }
  }
  return $query;
}

/**
 * Implements HOOK_sss_delete_result_alter().
 *
 * Add nodes that are flagged with the workflow state 'remove' to the list of deleted nodes.
 */
function akdn_ss_extra_sss_delete_result_alter($nodes, $limit, $date_min, $date_max, $pubkey) {
  // Get the terms that define deleted content
  $tid = variable_get('akdn_ss_extra_delete', array());
  if ($tid) {
    $query = db_select('node','n')
      ->fields('n', array('nid'))
      ->condition('n.changed', $date_min, ">=")
      ->condition('n.changed', $date_max, "<=")
      ->range(0,$limit)
      ->orderBy('n.changed', 'ASC');

    $query->join('taxonomy_index', 't', 'n.nid = t.nid');
    $query->condition('t.tid', $tid);

    $d_nodes = $query->execute()->fetchAll();
    foreach ($d_nodes as $node) {
      $nodes[] = $node->nid;
    }
  }
  return $nodes;
}
