<?php
/**
 * Syndication Server Module
 * Developed @ImageX Media
 * Authors:
 *          Shea McKinney - sherakama
 * 
 * This module provides additional services and interfaces for use in 
 * Syndicating content, vocabularies, and users
 * 
 * 
 * @todo:
 * PULL IN RELATED SERVICE
 *    REQUEST TYPE AND FRONT LOAD ALL RELATED CONTENT FIRST
 * 
 * 
 * 
 * 
 * 
 **/



/**
 * Implementation of hook_init().
 */
function syndication_server_init() {

  
}


 
 
 

/**
 * Implementation of hook_menu().
 */
function syndication_server_menu() {
  $items = array();

  $items['admin/config/syndication-server'] = array(
    'title' => 'Syndication Server Config',
    'description' => 'Configuration Settings for the Syndication Server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('syndication_server_admin_config_form'),
    'file' => 'inc/syndication_server.admin.inc',
    'access arguments' => array('administer syndication_server'),
  );

  $items['admin/config/syndication-server/clients'] = array(
    'title' => 'Client API Key List',
    'description' => 'A list of clients and api keys for this server',
    'page callback' => 'syndication_server_admin_clients_list',
    'file' => 'inc/syndication_server.admin.inc',
    'access arguments' => array('configure client api keys'),
  );
  
  $items['admin/config/syndication-server/clients/new'] = array(
    'title' => 'Create a new client API key',
    'description' => 'A list of clients and api keys for this server',
    'page callback' => 'syndication_server_admin_clients_new',
    'file' => 'inc/syndication_server.admin.inc',
    'access arguments' => array('configure client api keys'),
  );  

  $items['admin/config/syndication-server/clients/delete/%'] = array(
    'title' => 'Delete a client API key',
    'description' => 'Remove a client from the system',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('syndication_server_admin_clients_delete_confirm'),
    'file' => 'inc/syndication_server.admin.inc',
    'access arguments' => array('configure client api keys'),
  );  
  

  return $items;
}


/**
 * Implementation of hook_permission().
 */
function syndication_server_permission() {
  return array(
    'administer syndication_server' => array(
      'title' => t('Admin Syndication Server Settings'),
      'Description' => t('Configure the syndication server'),
    ),
    'retrieve syndication nodes' => array(
      'title' => t('Access syndication nodes index'),
      'Description' => t('Access syndication nodes'),
    ),
    'sync syndication content types' => array(
      'title' => t('Access syndication node content types'),
      'Description' => t('Access to the syndication node content type structure and settings'),
    ),
    'create syndication nodes' => array(
      'title' => t('Create Syndication nodes remotely'),
      'Description' => t('Create and publish syndication nodes remotely'),
    ),
    'retrieve syndication vocabularies' => array(
      'title' => t('Access syndication vocabularies'),
      'Description' => t('Access the vocabulary definition and term trees'),
    ),
    'retrieve syndication terms' => array(
      'title' => t('Access syndication voabulary terms'),
      'Description' => t('Access syndication voabulary terms'),
    ),
    'configure client api keys' => array(
      'title' => t('Create/Edit/Delete Client API keys'),
      'Description' => t('Create edit and delete client sites api keys'),
    ),
  );
}



/**
 * Implementation of hook_services_resources().
 */
function syndication_server_services_resources() {
  return array(
    'syndication_node' => array(
      
      // ACTIONS
      'actions' => array(
        
        // A query builder select function
        'select' => array(
          'help' => 'Retrieves nodes for syndication',
          'file' => array('file' => 'inc', 'module' => 'syndication_server', 'name' => 'inc/syndication_server.services'),
          'callback' => '_syndication_server_node_retrieve',
          'access callback' => 'user_access',
          'access arguments' => array('retrieve syndication nodes'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'content_type',
              'type' => 'string',
              'description' => 'the content type to retrieve. Defaults to all',
              'source' => array("data" => 'content_type'),
              'optional' => TRUE,
            ),
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'The maximum number of nodes to return',
              'source' => array("data" => 'limit'),
              'optional' => TRUE,
              'default value' => variable_get('services_node_index_page_size', 10),
            ),
            array(
              'name' => 'date_min',
              'type' => 'int',
              'description' => 'The datetime integer minimum created date',
              'source' => array("data" => 'date_min'),
              'optional' => TRUE,
            ),
            array(
              'name' => 'date_max',
              'type' => 'int',
              'description' => 'the datetime integer maximum created date',
              'source' => array("data" => 'date_max'),
              'optional' => TRUE,
            ),
            array(
              'name' => 'date_select',
              'type' => 'string',
              'description' => 'what field to run the min/max restriction on',
              'source' => array("data" => 'date_select'),
              'optional' => TRUE,
              'default value' => 'created',
            ),
            array(
              'name' => 'sort',
              'type' => 'string',
              'description' => 'SQL sorting Method',
              'source' => array("data" => 'sort'),
              'optional' => TRUE,
              'default value' => 'ASC',
            ),
            array(
              'name' => 'sort_on',
              'type' => 'string',
              'description' => 'what db field to sort on',
              'source' => array("data" => 'sort_on'),
              'optional' => TRUE,
              'default value' => 'created',
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'what number of results to offset the query range by',
              'source' => array("data" => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
            array(
              'name' => 'pubkey',
              'type' => 'string',
              'description' => 'The client public key',
              'source' => array("data" => 'pubkey'),
              'optional' => FALSE,
            ),
          ),
          
        ), // end select action        
        
        // Return a list of deleted node IDS within a date range
        'deleted' => array(
          'help' => 'Retrieves Deleted Node Ids',
          'file' => array('file' => 'inc', 'module' => 'syndication_server', 'name' => 'inc/syndication_server.services'),
          'callback' => "_syndication_server_node_retrieve_deleted",
          'access callback' => 'user_access',
          'access arguments' => array('retrieve syndication nodes'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'The maximum number of nodes to return',
              'source' => array("data" => 'limit'),
              'optional' => TRUE,
              'default value' => variable_get('services_node_index_page_size', 100),
            ),
            array(
              'name' => 'date_min',
              'type' => 'int',
              'description' => 'The datetime integer minimum created date',
              'source' => array("data" => 'date_min'),
              'optional' => TRUE,
              'default value' => 0,
            ),
            array(
              'name' => 'date_max',
              'type' => 'int',
              'description' => 'the datetime integer maximum created date',
              'source' => array("data" => 'date_max'),
              'optional' => TRUE,
              'default value' => time(),
            ),
            array(
              'name' => 'pubkey',
              'type' => 'string',
              'description' => 'The client public key',
              'source' => array("data" => 'pubkey'),
              'optional' => FALSE,
            ),
          ),
        ),
        
        // Cherry pick nodes based on id
        'cherry_pick' => array(
          'help' => 'Cherry pick and return nodes based on sent array of nids',
          'file' => array('file' => 'inc', 'module' => 'syndication_server', 'name' => 'inc/syndication_server.services'),
          'callback' => "_syndication_server_node_cherry_pick",
          'access callback' => 'user_access',
          'access arguments' => array('retrieve syndication nodes'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'nids',
              'type' => 'array',
              'description' => 'an array of nids to get',
              'source' => array("data" => 'nids'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'pubkey',
              'type' => 'string',
              'description' => 'The client public key',
              'source' => array("data" => 'pubkey'),
              'optional' => FALSE,
            ),
          ),
        ),        
      ), // action
    ), // syndication_node ENDPOINT
    
    
    // ----------------------------------------------------------------------------------------------------------------------------
    // TAXONOMY
    // ----------------------------------------------------------------------------------------------------------------------------
    
    'syndication_taxonomy' => array(
      
      // ACTIONS
      'actions' => array(
        
        // A query builder select function
        'enabled_vocabs' => array(
          'help' => 'Retrieves enabled vocabulary entities',
          'file' => array('file' => 'inc', 'module' => 'syndication_server', 'name' => 'inc/syndication_server.services'),
          'callback' => '_syndication_server_taxonomy_get_enabled_vocabs',
          'access callback' => 'user_access',
          'access arguments' => array('retrieve syndication vocabularies'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'pubkey',
              'type' => 'string',
              'description' => 'The client public key',
              'source' => array("data" => 'pubkey'),
              'optional' => FALSE,
            ),
          ),
        ), // end enabled vocabs action
        
        // GET MULTIPLE TREES
        'get_trees' => array(
          'file' => array('type' => 'inc', 'module' => 'syndication_server', 'name' => 'inc/syndication_server.services'),
          'help'   => t('This method returns a full list of taxonomy terms from multiple vocabularies.'),
          'access arguments' => array('retrieve syndication vocabularies'),
          'callback' => '_syndication_server_taxonomy_get_trees',
          'args'     => array(
            array(
              'name'         => 'vid',
              'type'         => 'array',
              'description'  => t('The vocabulary ids to retrieve.'),
              'source'       => array('data' => 'vid'),
              'optional'     => FALSE,
            ),
            array(
              'name'         => 'parent',
              'type'         => 'int',
              'description'  => t('The term ID under which to generate the tree. If 0, generate the tree for the entire vocabulary.'),
              'source'       => array('data' => 'parent'),
              'default value' => 0,
              'optional'     => TRUE,
            ),
            array(
              'name'         => 'maxdepth',
              'type'         => 'int',
              'description'  => t('The number of levels of the tree to return. Leave NULL to return all levels.'),
              'source'       => array('data' => 'maxdepth'),
              'default value' => NULL,
              'optional'     => TRUE,
            ),
          ),
        ),
        
      ), // actions
    ), // end syndicaiton_taxonomy ENDPOINT    
    
  ); // array
  
  
  
  
}





/**
 * Respond to node deletion.
 * implementation of hook_node_delete
 * 
 * @param $node
 *    The node object that is being deleted
 **/

function syndication_server_node_delete($node) {
  
  // Store the nid of the deleted node and when it was deleted in a custom table in 
  // order to update the clients
  
  db_insert('ss_deleted_nodes')
    ->fields(array(
      'nid' => $node->nid,
      'date' => time(),
    ))
    ->execute();
  
}


/**
 * Implementation of hook_form_alter
 * 
 **/

function syndication_server_form_alter(&$form, &$form_state, $form_id) {
  
  // Vocabulary Edit Page
  if($form_id == "taxonomy_form_vocabulary"){
    syndication_server_taxonomy_form_vocabulary_alter($form, $form_state);
  }
  
}


/**
 * Appends additional setting options to the vocabulary page
 * @param $form
 *    The form array
 * @param $form_state
 *    The form state
 * 
 **/

function syndication_server_taxonomy_form_vocabulary_alter(&$form, &$form_state) {
  
  $enabled_vocabs = variable_get('syndication_enabled_vocabularies', array());
  $machine_name = $form['#vocabulary']->machine_name;
  
  $form['enable_for_syndication'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable for syndication'),
    '#default_value' => !empty($enabled_vocabs[$machine_name]) ? $enabled_vocabs[$machine_name] : 0,
  );
  
  $form['#submit'][] = 'syndication_server_taxonomy_form_vocabulary_alter_submit';
  
}


/**
 * syndication_server_taxonomy_form_vocabulary_alter_submit
 * Submit handler for syndication_server_taxonomy_form_vocabulary_alter
 * 
 * Saves whether or not a taxonomy vocabulary should be syndicated
 * 
 **/

function syndication_server_taxonomy_form_vocabulary_alter_submit($form, $form_state) {
  
  $machine_name = $form['#vocabulary']->machine_name;
  $enabled_vocabs = variable_get('syndication_enabled_vocabularies',array());
  $enabled_vocabs[$machine_name] = $form_state['values']['enable_for_syndication'];
  
  variable_set('syndication_enabled_vocabularies', $enabled_vocabs);
  
}

