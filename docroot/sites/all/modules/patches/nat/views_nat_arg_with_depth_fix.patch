diff -rupN a/includes/nat_handler_argument_term_node_tid_depth.inc b/includes/nat_handler_argument_term_node_tid_depth.inc
--- a/includes/nat_handler_argument_term_node_tid_depth.inc	2012-06-06 10:41:32.000000000 -0400
+++ b/includes/nat_handler_argument_term_node_tid_depth.inc	2012-06-06 10:37:44.000000000 -0400
@@ -24,7 +24,6 @@ class nat_handler_argument_term_node_tid
   }
 
   function options_form(&$form, &$form_state) {
-    parent::options_form($form, $form_state);
     $form['depth'] = array(
       '#type' => 'weight',
       '#title' => t('Depth'),
@@ -36,15 +35,16 @@ class nat_handler_argument_term_node_tid
       '#type' => 'checkbox',
       '#title' => t('Allow multiple terms per argument'),
       '#description' => t('If selected, users can enter multiple arguments in the form of 1+2+3. Due to the number of JOINs it would require, AND will be treated as OR with this argument.'),
-      '#default_value' => !empty($this->options['break_phrase'])
+      '#default_value' => !empty($this->options['break_phrase']),
     );
 
     $form['set_breadcrumb'] = array(
       '#type' => 'checkbox',
       '#title' => t("Set the breadcrumb for the term parents"),
       '#description' => t('If selected, the breadcrumb trail will include all parent terms, each one linking to this view. Note that this only works if just one term was received.'),
-      '#default_value' => !empty($this->options['set_breadcrumb'])
+      '#default_value' => !empty($this->options['set_breadcrumb']),
     );
+    parent::options_form($form, $form_state);
   }
 
   function set_breadcrumb(&$breadcrumb) {
@@ -71,22 +71,22 @@ class nat_handler_argument_term_node_tid
     return $actions;
   }
 
-  function query() {
+  function query($group_by = FALSE) {
     $this->ensure_my_table();
 
     if (!empty($this->options['break_phrase'])) {
       $tids = new stdClass();
       $tids->value = $this->argument;
       $tids = views_break_phrase($this->argument, $tids);
-      if ($tids->value == -1) {
+      if ($tids->value == array(-1)) {
         return FALSE;
       }
 
       if (count($tids->value) > 1) {
-        $placeholder = " IN (" . implode(', ', array_fill(0, sizeof($tids->value), '%d')) . ")";
+        $operator = 'IN';
       }
       else {
-        $placeholder = " = %d";
+        $operator = '=';
       }
       foreach ($tids->value as $tid) {
         $nat_tid = nat_get_term($tid);
@@ -95,37 +95,37 @@ class nat_handler_argument_term_node_tid
       $tids = $nat_tids;
     }
     else {
-      $placeholder = "= %d";
-      $tids = array($this->argument);
+      $operator = "=";
+      $tids = $this->argument;
 
       $nat_tid = nat_get_term($this->argument);
       $tids = array($nat_tid->tid);
     }
-    $subquery = "\n  SELECT tn.vid FROM {taxonomy_term_data} tn\n";
-    $where = "  WHERE tn.tid $placeholder\n";
-    $args = $tids;
+    // Now build the subqueries.
+    $subquery = db_select('taxonomy_index', 'tn');
+    $subquery->addField('tn', 'nid');
+    $where = db_or()->condition('tn.tid', $tids, $operator);
     $last = "tn";
 
     if ($this->options['depth'] > 0) {
-      $subquery .= "    LEFT JOIN {taxonomy_term_hierarchy} th ON th.tid = tn.tid\n";
+      $subquery->leftJoin('taxonomy_term_hierarchy', 'th', "th.tid = tn.tid");
       $last = "th";
       foreach (range(1, abs($this->options['depth'])) as $count) {
-        $subquery .= "    LEFT JOIN {taxonomy_term_hierarchy} th$count ON $last.parent = th$count.tid\n";
-        $where .= "    OR th$count.tid $placeholder\n";
-        $args = array_merge($args, $tids);
+        $subquery->leftJoin('taxonomy_term_hierarchy', "th$count", "$last.parent = th$count.tid");
+        $where->condition("th$count.tid", $tids, $operator);
         $last = "th$count";
       }
     }
     elseif ($this->options['depth'] < 0) {
       foreach (range(1, abs($this->options['depth'])) as $count) {
-        $subquery .= "    LEFT JOIN {taxonomy_term_hierarchy} th$count ON $last.tid = th$count.parent\n";
-        $where .= "    OR th$count.tid $placeholder\n";
-        $args = array_merge($args, $tids);
+        $subquery->leftJoin('taxonomy_term_hierarchy', "th$count", "$last.tid = th$count.parent");
+        $where->condition("th$count.tid", $tids, $operator);
         $last = "th$count";
       }
     }
 
-    $this->query->add_where(0, "$this->table_alias.$this->real_field IN ($subquery$where  )", $args);
+    $subquery->condition($where);
+    $this->query->add_where(0, "$this->table_alias.$this->real_field", $subquery, 'IN');
   }
 
   function title() {
